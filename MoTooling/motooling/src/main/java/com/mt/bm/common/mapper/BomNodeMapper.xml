<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mt.bm.common.dao.BomNodeMapper">
  <resultMap id="BaseResultMap" type="com.mt.bm.common.model.BomNode">
    <id column="node_id" jdbcType="BIGINT" property="nodeId" />
    <result column="bom_id" jdbcType="BIGINT" property="bomId" />
    <result column="is_unused" jdbcType="CHAR" property="isUnused" />
    <result column="path" jdbcType="VARCHAR" property="path" />
    <result column="parent_path" jdbcType="VARCHAR" property="parentPath" />
    <result column="node_pos" jdbcType="INTEGER" property="nodePos" />
    <result column="depth" jdbcType="INTEGER" property="depth" />
    <result column="mat_id" jdbcType="BIGINT" property="matId" />
    <result column="mat_type" jdbcType="VARCHAR" property="matType" />
    <result column="mat_no" jdbcType="VARCHAR" property="matNo" />
    <result column="unit_no" jdbcType="VARCHAR" property="unitNo" />
    <result column="total_qty" jdbcType="DECIMAL" property="totalQty" />
    <result column="is_purchase" jdbcType="CHAR" property="isPurchase" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="sort_order" jdbcType="INTEGER" property="sortOrder" />
    <association property="mat" column="mat_id" select="com.mt.bm.common.dao.MatMapper.selectByPrimaryKey"/>
  </resultMap>
  <sql id="Base_Column_List">
    node_id, bom_id, is_unused, path, parent_path, node_pos, depth, mat_id,mat_type, mat_no, unit_no,
    total_qty, is_purchase, remark, sort_order
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bm_bom_node
    where node_id = #{nodeId,jdbcType=BIGINT}
  </select>
  <select id="selectByBomId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bm_bom_node
    where bom_id = #{bomId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from bm_bom_node
    where node_id = #{nodeId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.mt.bm.common.model.BomNode">
    insert into bm_bom_node (node_id, bom_id, is_unused, 
      path, parent_path, node_pos, 
      depth, mat_id,mat_type, mat_no,
      unit_no, total_qty, is_purchase,
      remark, sort_order)
    values (#{nodeId,jdbcType=BIGINT}, #{bomId,jdbcType=BIGINT}, #{isUnused,jdbcType=CHAR}, 
      #{path,jdbcType=VARCHAR}, #{parentPath,jdbcType=VARCHAR}, #{nodePos,jdbcType=INTEGER},
      #{depth,jdbcType=INTEGER}, #{matId,jdbcType=BIGINT},#{matType,jdbcType=VARCHAR}, #{matNo,jdbcType=VARCHAR},
      #{unitNo,jdbcType=VARCHAR}, #{totalQty,jdbcType=DECIMAL}, #{isPurchase,jdbcType=CHAR},
      #{remark,jdbcType=VARCHAR}, #{sortOrder,jdbcType=INTEGER})
    <selectKey resultType="java.lang.Long" keyProperty="nodeId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.mt.bm.common.model.BomNode">
    insert into bm_bom_node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nodeId != null">
        node_id,
      </if>
      <if test="bomId != null">
        bom_id,
      </if>
      <if test="isUnused != null">
        is_unused,
      </if>
      <if test="path != null">
        path,
      </if>
      <if test="parentPath != null">
        parent_path,
      </if>
      <if test="nodePos != null">
        node_pos,
      </if>
      <if test="depth != null">
        depth,
      </if>
      <if test="matId != null">
        mat_id,
      </if>
      <if test="matType != null">
        mat_type,
      </if>
      <if test="matNo != null">
        mat_no,
      </if>
      <if test="unitNo != null">
        unit_no,
      </if>
      <if test="totalQty != null">
        total_qty,
      </if>
      <if test="ispurchase != null">
        is_purchase,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="sortOrder != null">
        sort_order,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nodeId != null">
        #{nodeId,jdbcType=BIGINT},
      </if>
      <if test="bomId != null">
        #{bomId,jdbcType=BIGINT},
      </if>
      <if test="isUnused != null">
        #{isUnused,jdbcType=CHAR},
      </if>
      <if test="path != null">
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="parentPath != null">
        #{parentPath,jdbcType=VARCHAR},
      </if>
      <if test="nodePos != null">
        #{nodePos,jdbcType=INTEGER},
      </if>
      <if test="depth != null">
        #{depth,jdbcType=INTEGER},
      </if>
      <if test="matId != null">
        #{matId,jdbcType=BIGINT},
      </if>
      <if test="matType != null">
        #{mat_type,jdbcType=VARCHAR},
      </if>
      <if test="matNo != null">
        #{matNo,jdbcType=VARCHAR},
      </if>
      <if test="unitNo != null">
        #{unitNo,jdbcType=VARCHAR},
      </if>
      <if test="totalQty != null">
        #{totalQty,jdbcType=DECIMAL},
      </if>
      <if test="isPurchase != null">
        #{isPurchase,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="sortOrder != null">
        #{sortOrder,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.mt.bm.common.model.BomNode">
    update bm_bom_node
    <set>
      <if test="bomId != null">
        bom_id = #{bomId,jdbcType=BIGINT},
      </if>
      <if test="isUnused != null">
        is_unused = #{isUnused,jdbcType=CHAR},
      </if>
      <if test="path != null">
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="parentPath != null">
        parent_path = #{parentPath,jdbcType=VARCHAR},
      </if>
      <if test="nodePos != null">
        node_pos = #{nodePos,jdbcType=INTEGER},
      </if>
      <if test="depth != null">
        depth = #{depth,jdbcType=INTEGER},
      </if>
      <if test="matId != null">
        mat_id = #{matId,jdbcType=BIGINT},
      </if>
      <if test="matType != null">
        mat_type = #{matType,jdbcType=VARCHAR},
      </if>
      <if test="matNo != null">
        mat_no = #{matNo,jdbcType=VARCHAR},
      </if>
      <if test="unitNo != null">
        unit_no = #{unitNo,jdbcType=VARCHAR},
      </if>
      <if test="totalQty != null">
        total_qty = #{totalQty,jdbcType=DECIMAL},
      </if>
      <if test="isPurchase != null">
        is_purchase = #{isPurchase,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="sortOrder != null">
        sort_order = #{sortOrder,jdbcType=INTEGER},
      </if>
    </set>
    where node_id = #{nodeId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mt.bm.common.model.BomNode">
    update bm_bom_node
    set bom_id = #{bomId,jdbcType=BIGINT},
      is_unused = #{isUnused,jdbcType=CHAR},
      path = #{path,jdbcType=VARCHAR},
      parent_path = #{parentPath,jdbcType=VARCHAR},
      node_pos = #{nodePos,jdbcType=INTEGER},
      depth = #{depth,jdbcType=INTEGER},
      mat_id = #{matId,jdbcType=BIGINT},
      mat_type = #{matType,jdbcType=VARCHAR},
      mat_no = #{matNo,jdbcType=VARCHAR},
      unit_no = #{unitNo,jdbcType=VARCHAR},
      total_qty = #{totalQty,jdbcType=DECIMAL},
      is_purchase = #{isPurchase,jdbcType=CHAR},
      remark = #{remark,jdbcType=VARCHAR},
      sort_order = #{sortOrder,jdbcType=INTEGER}
    where node_id = #{nodeId,jdbcType=BIGINT}
  </update>


  <!--  -->
  <select id="getBomId" parameterType="java.lang.Long" resultType="java.lang.String">
    select  bom_id
    from bm_bom_node
    where is_unused !=1
    and parent_path=(select path from bm_bom_node where  node_id=#{nodeId,jdbcType=BIGINT})
    and is_patent_build = '1'
    order by  length(path) ,path
    limit 1
  </select>

  <select id="getNewBomNodePath" parameterType="java.lang.Long" resultType="java.lang.String">
    select  path
    from bm_bom_node
    where is_unused !=1
	AND bom_id=(select bom_id  from bm_bom_node where  node_id=#{nodeId,jdbcType=BIGINT})
    and parent_path=(select path from bm_bom_node where  node_id=#{nodeId,jdbcType=BIGINT})
    order by  length(path) desc, path desc
    limit 1
  </select>

  <select id="getNewBomNodeBrotherPath" parameterType="java.lang.Long" resultType="java.lang.String">
    select  path
    from bm_bom_node
    where is_unused !=1
    AND bom_id=(select bom_id  from bm_bom_node where  node_id=#{nodeId,jdbcType=BIGINT})
    and   node_id=#{nodeId,jdbcType=BIGINT}
    order by  length(path) desc, path desc
    limit 1
  </select>

  <select id="selectBomNodes" parameterType="Map" resultType="Map">
    select node_id,is_purchase,bm_mat.mat_id,bm_mat.mat_no,mat_name,mat_type,total_qty,
    spec,rawnature_name,length,width,height
    from bm_bom_node LEFT JOIN bm_mat on bm_bom_node.mat_id=bm_mat.mat_id
    where bm_bom_node.is_unused !=1
    <if test="bom_id != null">
      and bom_id = #{bom_id,jdbcType=BIGINT}
    </if>
    <if test="node_id != null and node_id != ''">
      and parent_path=(select path from bm_bom_node where  node_id=#{node_id,jdbcType=BIGINT})
    </if>
    <if test="mat_type != null and mat_type != ''">
      and bm_bom_node.mat_type = #{mat_type,jdbcType=VARCHAR}
    </if>
    order by  length(path) ,path
  </select>

  <select id="selectEBomNodes" parameterType="Map" resultType="Map">
    SELECT node_id,is_purchase,path,vwE.mat_id,vwE.mat_no,mat_type,total_qty ,
spec,rawnature_name,length,width,height
from
(select node_id,'1' as is_purchase,bm_bom_node.mat_id,mat_no,mat_type,total_qty,vw2.path
    from bm_bom_node LEFT JOIN (SELECT path,mat_id from bm_bom_node where bm_bom_node.is_unused !=1 and bom_id = #{bom_id,jdbcType=BIGINT} AND parent_path='0' and bm_bom_node.mat_type = '半成品' )vw2
ON bm_bom_node.mat_id=vw2.mat_id
    where bm_bom_node.is_unused !=1
      and bom_id = #{bom_id,jdbcType=BIGINT}
      AND parent_path='0'
     and bm_bom_node.mat_type = '电极'
UNION
   select node_id,'0' as is_purchase,mat_id,mat_no,mat_type,total_qty,path
    from bm_bom_node
    where bm_bom_node.is_unused !=1
      and bom_id = #{bom_id,jdbcType=BIGINT}
       AND parent_path='0'
     and bm_bom_node.mat_type = '半成品' and mat_id not in
(select mat_id    from bm_bom_node     where bm_bom_node.is_unused !=1      and bom_id = #{bom_id,jdbcType=BIGINT} AND parent_path='0'
     and bm_bom_node.mat_type = '电极')) as vwE
 LEFT JOIN bm_mat on vwE.mat_id=bm_mat.mat_id
 where mat_name !='外购模胚'
ORDER BY  length(path) ,path
  </select>




  <select id="selectFirstEBomNode" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bm_bom_node
    where is_unused !=1
    and parent_path='0'
    and mat_type = '电极'
    AND mat_id = #{mat_id,jdbcType=BIGINT}
    order by  length(path) ,path
    limit 1
  </select>



  <delete id="deleteByPNodeId" parameterType="Map">
    delete from bm_bom_node
    where bom_id=#{bom_id,jdbcType=BIGINT}
    and parent_path  in
    (SELECT t.path from (select path from bm_bom_node where  node_id=#{node_id,jdbcType=BIGINT})t)
  </delete>



  <delete id="deleteMatByPNodeId" parameterType="Map">
    delete from bm_mat
    where mat_id in (SELECT  mat_id FROM bm_bom_node where bom_id=#{bom_id,jdbcType=BIGINT}
    and parent_path=(select path from bm_bom_node where  node_id=#{node_id,jdbcType=BIGINT}))
    and mat_type_name!='标准件'
  </delete>


  <select id="getSonDefaultBomNode" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bm_bom_node
    where is_unused !=1
    and parent_path=(select path from bm_bom_node where  node_id=#{node_id,jdbcType=BIGINT})
    and is_patent_build = '1'
    order by  length(path) ,path
    limit 1
  </select>


  <select id="getBomNodeByPos" parameterType="Map" resultType="Map">
    select
    bom_id,node_id
    from bm_bom_node
    where is_unused !=1
    and bom_id=#{bom_id}
    and mat_id=#{mat_id}
    and node_pos=#{node_pos}
    order by  length(path) ,path
    limit 1
  </select>

  <select id="getBomPNode" parameterType="Map" resultType="Map">
    select
    <include refid="Base_Column_List" />
    from bm_bom_node
    where is_unused !=1
    and bom_id=#{bom_id}
    and path=(select parent_path from bm_bom_node where  node_id=#{node_id,jdbcType=BIGINT})
    order by  length(path) ,path
    limit 1
  </select>

  <select id="selectSBomNodes" parameterType="Map" resultType="Map">
    select
    <include refid="Base_Column_List" />
    from bm_bom_node
    where is_unused !=1
    <if test="bom_id != null">
      and bm_bom_node.bom_id = #{bom_id,jdbcType=BIGINT}
    </if>
    <if test="node_id != null and node_id != ''">
      and parent_path=(select path from bm_bom_node where  node_id=#{node_id,jdbcType=BIGINT})
    </if>
    order by  length(path) ,path
  </select>

</mapper>